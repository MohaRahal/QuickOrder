@page "/relatorios"
@using QuickOrder.Models
@using QuickOrder.Services
@inject OrderService orderService
@inject IJSRuntime JS

<h3 class="mb-4">📊 Relatórios de Pedidos</h3>

<div class="card shadow-sm mb-4">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">Filtros</h5>
    </div>
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-4">
                <label for="dataInicio" class="form-label">Data Início:</label>
                <input id="dataInicio" type="date" class="form-control" @bind="dataInicio" />
            </div>
            <div class="col-md-4">
                <label for="dataFim" class="form-label">Data Fim:</label>
                <input id="dataFim" type="date" class="form-control" @bind="dataFim" />
            </div>
            <div class="col-md-4">
                <label for="tipoGrafico" class="form-label">Tipo de Gráfico:</label>
                <select id="tipoGrafico" class="form-select" @bind="tipoGrafico">
                    <option value="">-- Selecione um cliente --</option>
                    <option value="bar">Gráfico de Barras</option>
                    <option value="pie">Gráfico de Pizza</option>
                    <option value="line">Gráfico de Linhas</option>
                </select>
            </div>
        </div>
        <button class="btn btn-primary mt-3" @onclick="GerarRelatorio">
            <i class="fas fa-chart-bar"></i> Gerar Relatório
        </button>
    </div>
</div>

@if (dadosBrutos != null && dadosBrutos.Any())
{
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-success text-white">
            <h5 class="mb-0">Gráfico</h5>
        </div>
        <div class="card-body">
            <canvas id="chartCanvas" width="200" height="100"></canvas>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-header bg-secondary text-white">
            <h5 class="mb-0">Dados Brutos</h5>
        </div>
        <div class="card-body">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Cliente</th>
                        <th>Quantidade de Pedidos</th>
                        <th>Valor Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var dado in dadosBrutos)
                    {
                        <tr>
                            <td>@dado.Cliente</td>
                            <td>@dado.QuantidadePedidos</td>
                            <td>@dado.ValorTotal.ToString("C")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}
else
{
    <p class="text-muted">Nenhum dado disponível. Ajuste os filtros e gere o relatório.</p>
}

@code {
    private DateTime? dataInicio;
    private DateTime? dataFim;
    private string tipoGrafico = "bar"; // Tipo de gráfico padrão
    private List<DadosBrutos> dadosBrutos;

    private async Task GerarRelatorio()
    {
        try
        {
            // Obter dados do serviço
            var pedidos = await orderService.ObterTodosPedidosAsync();

            // Filtrar por data
            if (dataInicio.HasValue && dataFim.HasValue)
            {
                pedidos = pedidos.Where(p => p.OrderDate >= dataInicio && p.OrderDate <= dataFim).ToList();
            }

            // Agrupar por cliente
            dadosBrutos = pedidos
                .GroupBy(p => p.NameClient)
                .Select(g => new DadosBrutos
                    {
                        Cliente = g.Key,
                        QuantidadePedidos = g.Count(),
                        ValorTotal = g.Sum(p => p.TotalOrder)
                    })
                .ToList();

            var labels = dadosBrutos.Select(d => d.Cliente).ToList();
            var quantidadePedidos = dadosBrutos.Select(d => d.QuantidadePedidos).ToList();
            var valorTotal = dadosBrutos.Select(d => (double)d.ValorTotal).ToList();

           
            await JS.InvokeVoidAsync("renderChart", "chartCanvas", tipoGrafico, labels, quantidadePedidos, valorTotal);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao gerar relatório: {ex.Message}");
        }
    }

    private class DadosBrutos
    {
        public string Cliente { get; set; }
        public int QuantidadePedidos { get; set; }
        public decimal ValorTotal { get; set; }
    }
}
